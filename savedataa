import json

def run_all_sqls_and_write_files(
    json_path: str,
    base_output_path: str,
    format: str = "parquet"
) -> None:
    """
    Executes all SQL queries from a JSON file and writes each result to ADLS
    as a single file named <ApiName>.<format> (e.g., ap1.parquet).

    Parameters:
        json_path (str): Path to the JSON file on DBFS (e.g., "/mnt/sql/query_list.json").
        base_output_path (str): ADLS folder path (e.g., "abfss://.../output/").
        format (str): Output format ("parquet", "csv", etc.). Default is "parquet".

    Returns:
        None
    """
    try:
        # Read JSON file from DBFS
        with open(f"/dbfs{json_path}", "r") as file:
            data = json.load(file)
            query_list = data.get("API", [])

        if not query_list:
            raise ValueError("No 'API' entries found in the JSON.")

        # Ensure output path ends with /
        if not base_output_path.endswith("/"):
            base_output_path += "/"

        for item in query_list:
            api_name = item.get("ApiName")
            query = item.get("sourceSQL")

            if not api_name or not query:
                print(f"‚ö†Ô∏è Skipping entry with missing ApiName or sourceSQL: {item}")
                continue

            print(f"üìå Running query for ApiName '{api_name}'...")

            try:
                df = spark.sql(query)

                # Create temporary folder to save file before renaming
                temp_folder = f"{base_output_path}__temp_{api_name}/"
                df.coalesce(1).write.mode("overwrite").format(format).save(temp_folder)

                # Rename part file to <ApiName>.<format>
                files = dbutils.fs.ls(temp_folder)
                part_file = [f.path for f in files if f.name.startswith("part-")][0]
                final_path = f"{base_output_path}{api_name}.{format}"

                dbutils.fs.cp(part_file, final_path)
                dbutils.fs.rm(temp_folder, recurse=True)

                print(f"‚úÖ Saved file: {final_path}")

            except Exception as qe:
                print(f"‚ùå Error running query for '{api_name}': {qe}")

    except Exception as e:
        print(f"‚ùå General error: {e}")
